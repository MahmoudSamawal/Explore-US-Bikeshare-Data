# -*- coding: utf-8 -*-
"""bikeshare.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rJDYiRqpa4jA_KsBTux3sai-VmFnZ2lG

# Importing and declaration of the data
"""

import pandas as pd
import numpy as np
import datetime
import calendar 
import time

CITY_DATA = { 'Chicago': '/content/drive/MyDrive/FWD/Data/Professional/1st Project/chicago.xlsx',
              'Newyork': '/content/drive/MyDrive/FWD/Data/Professional/1st Project/new_york_city.xlsx',
              'Washington': '/content/drive/MyDrive/FWD/Data/Professional/1st Project/washington.xlsx' }

MONTHS={"All":"","January":"", "February":"", "March":"", "April":"", "May":"", "June":""}
DAYS={"All":"","Saturday":"","Sunday":"","Monday":"","Tuesday":"","Wednesday":"","Thursday":"","Friday":""}

"""#Get the user data , which the analysis will be applied on"""

def get_filters():

  """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
  """
  print('Hello! Let\'s explore some US bikeshare data!')

  # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
  while True:
    try:
      city=str(input('Choose a city name to analyze from(Chicago,Newyork,Washington)')).title()
      CITY_DATA[city]
      break
    except :
      print('It is an invalid word')

  # TO DO: get user input for month (all, january, february, ... , june)
  while True:
    try:
      month=input('Choose a month name to analyze from("All","January", "February", "March", "April", "May", "June")')
      MONTHS[month]
      break
    except KeyError:
      print('It is an invalid word')
  


  # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
  while True:
    try:
      day=input('Choose a day name to analyze from("All","Saturday","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday")')
      DAYS[day]
      break
    except KeyError:
      print('It is an invalid word')


  print('-'*40)
  print('The Entered Filters are, City:{} , Month:{} , Day:{}'.format(city,month,day))
  return city, month, day

#city, month, day=get_filters()

"""# Acquire the chosen data"""

def load_data(city, month, day):
    
  """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
    (str) city - name of the city to analyze
    (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - pandas DataFrame containing city data filtered by month and day
  """
    
  # load data file into a dataframe
  df=pd.read_excel(CITY_DATA[city])

  # extract month and day of week from Start Time to create new columns
  monthlist = np.arange(0,len(df['Start Time']),1)
  dayslist = list(np.arange(0,len(df['Start Time']),1))
    
  for i in range(0,len(df['Start Time']),1):
    monthlist[i]=(((str(df['Start Time'][i]).split(' '))[0]).split('-'))[1]
    date=((str(df['Start Time'][i]).split(' '))[0])
    dayslist[i]=(calendar.day_name[datetime.datetime.strptime(date, '%Y-%m-%d').weekday()])
    
  df['day_of_week']=dayslist
  df['month']=monthlist


  # filter by month if applicable
  if month != 'All':
      # use the index of the months list to get the corresponding int
      months = ('January', 'February', 'March', 'April', 'May', 'June')
      month = (months.index(month))+1
      # filter by month to create the new dataframe
      df = df[df['month']==month]
        
  # filter by day of week if applicable
  if day != 'All':
    df = df[df['day_of_week']==day]

  
  print('The Columns Name of Choosen DataFrame are:{}'.format(df.columns)) 
  return df

#df=load_data(city, month, day)

"""#Performing the EDA """

def time_stats(df):

  """Displays statistics on the most frequent times of travel."""

  print('\nCalculating The Most Frequent Times of Travel...\n')
  start_time = time.time()

  # TO DO: display the most common month
  cmonth=int(df['month'].value_counts().idxmax())
  months=['January', 'February', 'March', 'April', 'May', 'June']
  cmonth=months[cmonth-1]

  # TO DO: display the most common day of week
  cday=df['day_of_week'].value_counts().idxmax()

  # TO DO: display the most common start hour
  shlist=list(df['Start Time'])
  for i in range(0,len(shlist),1):
    shlist[i]=(str((str(shlist[i]).split(' '))[1]).split(':'))[0]
  df['Starting Hour']=shlist
  cstarthour=df['Starting Hour'].value_counts().idxmax()
  print('The Time Statistics are, Common Months:{} , Common Days:{} , Common Starting Hours:{}'.format(cmonth,cday,cstarthour))
  print("\nThis took %s seconds." % (time.time() - start_time))
  print('-'*40)
  return cmonth,cday,cstarthour

#time_stats(df)

def station_stats(df):
  """Displays statistics on the most popular stations and trip."""

  print('\nCalculating The Most Popular Stations and Trip...\n')
  start_time = time.time()

  # TO DO: display most commonly used start station
  cstartstation=df['Start Station'].value_counts().idxmax()
  print('The most commonly used start station is:{} '.format(cstartstation))

  # TO DO: display most commonly used end station
  cendstation=df['End Station'].value_counts().idxmax()
  print('The most commonly used end station is:{} '.format(cendstation))

  # TO DO: display most frequent combination of start station and end station trip
  ccombination=(df['Start Station']+df['End Station']).value_counts().idxmax()
  print('The most frequent combination of start station and end station trip is:{} '.format(ccombination))

  print("\nThis took %s seconds." % (time.time() - start_time))
  print('-'*40)
  return cstartstation,cendstation,ccombination
#station_stats(df)

def trip_duration_stats(df):
  """Displays statistics on the total and average trip duration."""

  print('\nCalculating Trip Duration...\n')
  start_time = time.time()

  # TO DO: display total travel time
  ttt=df['Trip Duration'].sum()


  # TO DO: display mean travel time
  mtt=df['Trip Duration'].mean()

  print('The Trip Duration Statistics are, Total Travel Time:{} , Mean Travel Time:{}'.format(ttt,mtt))

  print("\nThis took %s seconds." % (time.time() - start_time))
  print('-'*40)
  print('The Trip Duration Statistics are, Total Travel Time:{} , Mean Travel Time:{}'.format(ttt,mtt))
  return ttt,mtt

#print(trip_duration_stats(df))

def user_stats(df,city):
  """Displays statistics on bikeshare users."""

  print('\nCalculating User Stats...\n')
  start_time = time.time()

  # TO DO: Display counts of user types
  usertypes=df['User Type'].value_counts()
  print('The counts of user types is:{}'.format(usertypes))


  specialcities=('Chicago','NewYork')
  # TO DO: Display counts of gender
  if city in specialcities:
    gendercounts=df['Gender'].value_counts()
    print('The counts of gender is:{}'.format(gendercounts))  
    # TO DO: Display earliest, most recent, and most common year of birth
    earliestyear=df['Birth Year'].min()
    print('The earliest year of birth is:{}'.format(earliestyear))
    mostrecentyear=df['Birth Year'].max()
    print('The most recent year of birth is:{}'.format(mostrecentyear))
    mostcommonyear=df['Birth Year'].idxmax()
    print('The most common year of birth is:{}'.format(mostcommonyear))
    #return gendercounts.values ,earliestyear ,mostrecentyear ,mostcommonyear
    


  print("\nThis took %s seconds." % (time.time() - start_time))
  print('-'*40)

"""#Displaying the EDA results"""

def display_data():

    options={'yes':'','no':''}
    start_loc = 0

    while True:
      try:
        view_data = str(input('\nWould you like to view 5 rows of individual trip data? Enter yes or no\n')).lower()
        options[view_data]
        break
      except:
        print('Its an invalid choise, Re-enter it again')

    while view_data=='yes':
      print(df.iloc[start_loc:start_loc+5])
      start_loc = start_loc + 5
      
      while True:
        try:
          view_data = input("Do you wish to continue? Enter yes or no\n :").lower()
          options[view_data]
          break
        except:
          print('Its an invalid choise, Re-enter it again')

  display_data()

#print(user_stats(df))



def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df, city)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()